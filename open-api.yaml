---
openapi: 3.0.3
info:
  title: Backend API (development)
  description: MSE Services Design Backend Project
  contact:
    name: "Fernando França, Joana Maia, João Pimentel"
  version: 1.0.0
paths:
  /orders:
    get:
      tags:
        - Order Resource
      operationId: readAll
      parameters:
        - name: status
          in: query
          schema:
            $ref: "#/components/schemas/Status"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      tags:
        - Order Resource
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: OK
  /orders/{id}:
    get:
      tags:
        - Order Resource
      operationId: read
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    put:
      tags:
        - Order Resource
      operationId: update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
    delete:
      tags:
        - Order Resource
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /orders/{id}/photo:
    post:
      tags:
        - Order Resource
      operationId: updatePhoto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormData"
      responses:
        "200":
          description: OK
  /products:
    get:
      tags:
        - Product Resource
      operationId: readAll
      parameters:
        - name: type
          in: query
          schema:
            $ref: "#/components/schemas/Type"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      tags:
        - Product Resource
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: OK
  /products/{id}:
    get:
      tags:
        - Product Resource
      operationId: read
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
  /staffs:
    post:
      tags:
        - Staff Resource
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Staff"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Staff"
  /staffs/login:
    post:
      tags:
        - Staff Resource
      operationId: login
      parameters:
        - name: password
          in: query
          schema:
            type: string
        - name: username
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Staff"
  /staffs/logout:
    post:
      tags:
        - Staff Resource
      operationId: logout
      parameters:
        - name: token
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Staff"
components:
  schemas:
    File:
      type: object
      properties:
        path:
          type: string
        invalid:
          type: boolean
        name:
          type: string
        parent:
          type: string
        parentFile:
          $ref: "#/components/schemas/File"
        absolute:
          type: boolean
        absolutePath:
          type: string
        absoluteFile:
          $ref: "#/components/schemas/File"
        canonicalPath:
          type: string
        canonicalFile:
          $ref: "#/components/schemas/File"
        directory:
          type: boolean
        file:
          type: boolean
        hidden:
          type: boolean
        totalSpace:
          format: int64
          type: integer
        freeSpace:
          format: int64
          type: integer
        usableSpace:
          format: int64
          type: integer
    FormData:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/File"
        filename:
          type: string
        mimetype:
          type: string
    Order:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        totalPrice:
          format: float
          type: number
        status:
          $ref: "#/components/schemas/Status"
        staffName:
          type: string
        locationTag:
          type: string
        items:
          type: object
          additionalProperties:
            format: int32
            type: integer
    Product:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
        description:
          type: string
        image:
          type: string
        price:
          format: float
          type: number
        type:
          $ref: "#/components/schemas/Type"
    Staff:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        username:
          type: string
        password:
          type: string
        token:
          type: string
    Status:
      enum:
        - WAITING
        - IN_PROGRESS
        - PREPARED
        - DELIVERED
      type: string
    Type:
      enum:
        - APPETIZER
        - BEVERAGE
        - DESSERT
        - MAIN
        - SOUP
      type: string
    UUID:
      format: uuid
      pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
      type: string
